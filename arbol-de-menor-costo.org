#+title: Árbol generador de menor costo

#+options: toc:nil

#+latex_header: \usepackage{listings}
#+latex_header: \lstalias{ipython}{python}
#+latex_header: \lstset{basicstyle=\small\ttfamily, frame=single}

#+latex_header: \usepackage{bera}

#+property: header-args:ipython :exports both :cache yes :session arbol :results raw drawer

* Problema

Supongamos que a cada arista de la gráfica completa \(K_{n}\) se le
asigna un valor ("peso"). Si a cada subgráfica le asignamos un peso
igual a la suma de los pesos de sus aristas, consideraremos el
problema de encontrar el árbol generador de menor peso.

* Algoritmo de Kruskal

El algoritmo de Kruskal consiste en escoger sucesivamente las aristas
más baratas con tal de que no formen ciclos con las aristas escogidas
previamente. En una gráfica con \(n\) vértices se puede demostrar que
tal algoritmo termina cuando hayamos escogido \(n-1\) aristas, y que
el árbol así construido es tal que tiene costo mínimo.

* Implementación en Python

Primeramente vamos a importar las bibliotecas que vamos a utilizar.

#+begin_src ipython
import networkx as nx
import matplotlib.pyplot as plt
from random import random as random
from scipy.spatial.distance import euclidean
#+end_src

#+RESULTS[2a253d47c089a054eb3655b60d8ccea8fad581c9]:
:results:
# Out[5]:
:end:

A continuación definiremos una gráfica aleatoria con 10 vértices.

#+begin_src ipython
g=nx.gnp_random_graph(10, 0.2)
#+end_src

#+RESULTS[686d2b8b58905b6e9c928e84fd5489c436bec335]:
:results:
# Out[6]:
:end:

Veremos si nuestra gráfica es un bosque.

#+begin_src ipython
nx.is_forest(g), nx.is_connected(g)
#+end_src

#+RESULTS[e7d1dbb3a296c52111081a2873e11b0c5e1bcb99]:
:results:
# Out[7]:
: (False, False)
:end:

A continuación dibujaremos esta gráfica.

#+begin_src ipython
nx.draw(g, with_labels=True)
#+end_src

#+RESULTS[7a5a44e71604efbb3ac02fd3863ef7628a5be23d]:
:results:
# Out[8]:
[[file:./obipy-resources/2315uTn.png]]
:end:

Calcularemos las componentes conexas de esta gráfica: 

#+begin_src ipython
list(nx.connected_components(g))
#+end_src

#+RESULTS[fd43bac86ab4e6adb6ece858cb2c922a37acadb0]:
:results:
# Out[9]:
: [{0, 3, 5, 6, 7}, {1}, {2}, {4, 9}, {8}]
:end:

Veamos la componente que contiene al vértice 2.

#+begin_src ipython
nx.node_connected_component(g, 2)
#+end_src

#+RESULTS[46f9dabf3af17b6574e7108bc8b02681d03298fd]:
:results:
# Out[10]:
: {2}
:end:

A continuación dibujaremos un árbol escogido aleatoriamente. 

#+begin_src ipython
t=nx.random_tree(10)
nx.draw(t, with_labels=True)
#+end_src

#+RESULTS[40cadd15ea973ae0dd4c6e9ce48469aa6584d9b0]:
:results:
# Out[11]:
[[file:./obipy-resources/23157dt.png]]
:end:

* Puntos en el plano

Si tenemos dos listas de números de tamaño =n=, podemos dibujar =n=
puntos en el plano, tomando las coordenadas =x= de la primera lista y
las coordenadas =y= de la segunda.

#+begin_src ipython
plt.plot([1,1,2],[1,2,3],'bx')
plt.axis([0,3,0,4])
plt.show()
#+end_src

#+RESULTS[a2473dc10d4388557d58b145c3b398832095523d]:
:results:
# Out[12]:
[[file:./obipy-resources/2315Ioz.png]]
:end:

Vamos a definir una función que dibuje =n= puntos en el plano
aleatoriamente. 

#+begin_src ipython
def puntos_en_el_plano(n):
    listax=[]
    listay=[]
    for i in range(n):
        listax.append(random())
        listay.append(random())
    return listax, listay
#+end_src

#+RESULTS[1cddae6365e0c7df4eef77ad1b5bc8bbf58f96c2]:
:results:
# Out[13]:
:end:

#+begin_src ipython
puntos=puntos_en_el_plano(50)
#+end_src

#+RESULTS[9ff8894398a2a07a6c3e77984fe46197b54683d8]:
:results:
# Out[14]:
:end:

#+begin_src ipython
plt.plot(*puntos, 'ro')
plt.show()
#+end_src

#+RESULTS[3e875b45815176da72d413ae26cf591eba8c559f]:
:results:
# Out[15]:
[[file:./obipy-resources/23156xC.png]]
:end:

Hagamos una función tal que, a partir de dos listas, produzca el
dibujo: 

#+begin_src ipython
def dibujo_puntos(listax, listay):
    plt.plot(listax, listay, 'ro')
    plt.axis([-0.1,1.1,-0.1,1.1])
    plt.gca().set_aspect('equal')
    plt.show()
#+end_src

#+RESULTS[b62c33bac294c25d54476a3d29ed7d0fda02559e]:
:results:
# Out[16]:
:end:

#+begin_src ipython
dibujo_puntos(*puntos)
#+end_src

#+RESULTS[274d1e4a2e4c1e9a72c9f464a39ff8637dd52977]:
:results:
# Out[17]:
[[file:./obipy-resources/2315H8I.png]]
:end:

*Distancia Euclidiana

#+begin_src ipython
a = (0,0)
b = (3,5)
euclidean(a,b)
#+end_src

#+RESULTS:
:results:
# Out[18]:
: 5.830951894845301
:end:

* Grafica con pesos

En =networkx= se pueden considerar graficas donde cada arista tiene un
peso. Por ejemplo:

#+begin_src ipython
g = nx.Graph()
g.add_nodes_from(["a","b","c"])
g.add_weighted_edges_from([("a","b",2),("a","c", 0.5)])
position= nx.spring_layout(g)
nx.draw_networkx_edge_labels(g, pos=position)
nx.draw(g, with_labels=True, pos=position)
#+end_src

#+RESULTS:
:results:
# Out[19]:
[[file:./obipy-resources/2315UGP.png]]
:end:

Definimos ahora una funcion que, dadas dos listas de numeros produzca
una grafica con pesos donde los vertices sean los puntos y el peso
entre dos puntos cualesquiera se la distancia euclidiana

#+begin_src ipython
def grafica_euclidiana(listax,listay):
    G= nx.Graph()
    n= len(listax)
    vertices = []
    for i in range(n):
        vertices.append((listax[i],listay[i]))
        aristas = []

    for i in range(n):
        for j in range(i+1, n):
            u = vertices[i]
            v = vertices[j]
            aristas.append((u,v,euclidean(u,v)))   
    G.add_nodes_from(vertices)
    G.add_weighted_edges_from(aristas)
    return G
                
#+end_src

#+RESULTS[581de2f9bfb44bbdcb8a8669aafde552ab70630f]:
:results:
# Out[29]:
:end:

#+begin_src ipython
g = grafica_euclidiana(*puntos)
#+end_src

#+RESULTS:
:results:
# Out[30]:
:end:

#+begin_src ipython
def arbol_menor_costo(G):
    T=nx.Graph
    T.add_nodes_from(G)
    aristas = list(G.edges(data = True))
    aristas = sorted(aristas, key = lambda e : -e[2]['weight'])
    while len(T.edges()) < len(G)-1:
        e = aristas.pop()
        if not(e[0] in nx.node_connected_component(T,e[1])):
            T.add_edge(e[0], e[1])
    return T
#+end_src

#+RESULTS:
:results:
# Out[31]:
:end:

#+begin_src ipython
plt.figure(figsize=(10,10))

for v in t.nodes():
    plt.plot(v[0], v[1], 'ro')

for e in t.edges():
    p1 = e[0]
    p2 = e[1]
    plt.plot([p1[0], p2[0]], [p1[1], p2[1]], color='blue' )

plt.axis([-0.1, 1.1, -0.1, 1.1])
plt.gca().set_aspect('equal')

plt.show()
#+end_src


# Local Variables:
# org-confirm-babel-evaluate: nil
# End:
